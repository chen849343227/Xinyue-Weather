package com.chen.xinyueweather.dao.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.chen.xinyueweather.dao.bean.CityManage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CITY_MANAGE".
*/
public class CityManageDao extends AbstractDao<CityManage, String> {

    public static final String TABLENAME = "CITY_MANAGE";

    /**
     * Properties of entity CityManage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property WeatherId = new Property(0, String.class, "weatherId", true, "WEATHER_ID");
        public final static Property AreaName = new Property(1, String.class, "areaName", false, "AREA_NAME");
        public final static Property Weather = new Property(2, String.class, "weather", false, "WEATHER");
        public final static Property Temperature = new Property(3, String.class, "temperature", false, "TEMPERATURE");
    }


    public CityManageDao(DaoConfig config) {
        super(config);
    }
    
    public CityManageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CITY_MANAGE\" (" + //
                "\"WEATHER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: weatherId
                "\"AREA_NAME\" TEXT," + // 1: areaName
                "\"WEATHER\" TEXT," + // 2: weather
                "\"TEMPERATURE\" TEXT);"); // 3: temperature
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CITY_MANAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CityManage entity) {
        stmt.clearBindings();
 
        String weatherId = entity.getWeatherId();
        if (weatherId != null) {
            stmt.bindString(1, weatherId);
        }
 
        String areaName = entity.getAreaName();
        if (areaName != null) {
            stmt.bindString(2, areaName);
        }
 
        String weather = entity.getWeather();
        if (weather != null) {
            stmt.bindString(3, weather);
        }
 
        String temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindString(4, temperature);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CityManage entity) {
        stmt.clearBindings();
 
        String weatherId = entity.getWeatherId();
        if (weatherId != null) {
            stmt.bindString(1, weatherId);
        }
 
        String areaName = entity.getAreaName();
        if (areaName != null) {
            stmt.bindString(2, areaName);
        }
 
        String weather = entity.getWeather();
        if (weather != null) {
            stmt.bindString(3, weather);
        }
 
        String temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindString(4, temperature);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public CityManage readEntity(Cursor cursor, int offset) {
        CityManage entity = new CityManage( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // weatherId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // areaName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // weather
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // temperature
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CityManage entity, int offset) {
        entity.setWeatherId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAreaName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWeather(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTemperature(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CityManage entity, long rowId) {
        return entity.getWeatherId();
    }
    
    @Override
    public String getKey(CityManage entity) {
        if(entity != null) {
            return entity.getWeatherId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CityManage entity) {
        return entity.getWeatherId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
