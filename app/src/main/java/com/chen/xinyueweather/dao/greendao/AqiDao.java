package com.chen.xinyueweather.dao.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.chen.xinyueweather.dao.bean.Aqi;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AQI".
*/
public class AqiDao extends AbstractDao<Aqi, String> {

    public static final String TABLENAME = "AQI";

    /**
     * Properties of entity Aqi.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AreaId = new Property(0, String.class, "areaId", true, "AREA_ID");
        public final static Property Advice = new Property(1, String.class, "advice", false, "ADVICE");
        public final static Property Aqi = new Property(2, String.class, "aqi", false, "AQI");
        public final static Property Citycount = new Property(3, int.class, "citycount", false, "CITYCOUNT");
        public final static Property Cityrank = new Property(4, int.class, "cityrank", false, "CITYRANK");
        public final static Property Co = new Property(5, String.class, "co", false, "CO");
        public final static Property Color = new Property(6, String.class, "color", false, "COLOR");
        public final static Property Level = new Property(7, String.class, "level", false, "LEVEL");
        public final static Property No2 = new Property(8, String.class, "no2", false, "NO2");
        public final static Property O3 = new Property(9, String.class, "o3", false, "O3");
        public final static Property Pm10 = new Property(10, String.class, "pm10", false, "PM10");
        public final static Property Pm25 = new Property(11, String.class, "pm25", false, "PM25");
        public final static Property Quality = new Property(12, String.class, "quality", false, "QUALITY");
        public final static Property So2 = new Property(13, String.class, "so2", false, "SO2");
        public final static Property Timestamp = new Property(14, String.class, "timestamp", false, "TIMESTAMP");
        public final static Property UpDateTime = new Property(15, String.class, "upDateTime", false, "UP_DATE_TIME");
    }


    public AqiDao(DaoConfig config) {
        super(config);
    }
    
    public AqiDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AQI\" (" + //
                "\"AREA_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: areaId
                "\"ADVICE\" TEXT," + // 1: advice
                "\"AQI\" TEXT," + // 2: aqi
                "\"CITYCOUNT\" INTEGER NOT NULL ," + // 3: citycount
                "\"CITYRANK\" INTEGER NOT NULL ," + // 4: cityrank
                "\"CO\" TEXT," + // 5: co
                "\"COLOR\" TEXT," + // 6: color
                "\"LEVEL\" TEXT," + // 7: level
                "\"NO2\" TEXT," + // 8: no2
                "\"O3\" TEXT," + // 9: o3
                "\"PM10\" TEXT," + // 10: pm10
                "\"PM25\" TEXT," + // 11: pm25
                "\"QUALITY\" TEXT," + // 12: quality
                "\"SO2\" TEXT," + // 13: so2
                "\"TIMESTAMP\" TEXT," + // 14: timestamp
                "\"UP_DATE_TIME\" TEXT);"); // 15: upDateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AQI\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Aqi entity) {
        stmt.clearBindings();
 
        String areaId = entity.getAreaId();
        if (areaId != null) {
            stmt.bindString(1, areaId);
        }
 
        String advice = entity.getAdvice();
        if (advice != null) {
            stmt.bindString(2, advice);
        }
 
        String aqi = entity.getAqi();
        if (aqi != null) {
            stmt.bindString(3, aqi);
        }
        stmt.bindLong(4, entity.getCitycount());
        stmt.bindLong(5, entity.getCityrank());
 
        String co = entity.getCo();
        if (co != null) {
            stmt.bindString(6, co);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(7, color);
        }
 
        String level = entity.getLevel();
        if (level != null) {
            stmt.bindString(8, level);
        }
 
        String no2 = entity.getNo2();
        if (no2 != null) {
            stmt.bindString(9, no2);
        }
 
        String o3 = entity.getO3();
        if (o3 != null) {
            stmt.bindString(10, o3);
        }
 
        String pm10 = entity.getPm10();
        if (pm10 != null) {
            stmt.bindString(11, pm10);
        }
 
        String pm25 = entity.getPm25();
        if (pm25 != null) {
            stmt.bindString(12, pm25);
        }
 
        String quality = entity.getQuality();
        if (quality != null) {
            stmt.bindString(13, quality);
        }
 
        String so2 = entity.getSo2();
        if (so2 != null) {
            stmt.bindString(14, so2);
        }
 
        String timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindString(15, timestamp);
        }
 
        String upDateTime = entity.getUpDateTime();
        if (upDateTime != null) {
            stmt.bindString(16, upDateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Aqi entity) {
        stmt.clearBindings();
 
        String areaId = entity.getAreaId();
        if (areaId != null) {
            stmt.bindString(1, areaId);
        }
 
        String advice = entity.getAdvice();
        if (advice != null) {
            stmt.bindString(2, advice);
        }
 
        String aqi = entity.getAqi();
        if (aqi != null) {
            stmt.bindString(3, aqi);
        }
        stmt.bindLong(4, entity.getCitycount());
        stmt.bindLong(5, entity.getCityrank());
 
        String co = entity.getCo();
        if (co != null) {
            stmt.bindString(6, co);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(7, color);
        }
 
        String level = entity.getLevel();
        if (level != null) {
            stmt.bindString(8, level);
        }
 
        String no2 = entity.getNo2();
        if (no2 != null) {
            stmt.bindString(9, no2);
        }
 
        String o3 = entity.getO3();
        if (o3 != null) {
            stmt.bindString(10, o3);
        }
 
        String pm10 = entity.getPm10();
        if (pm10 != null) {
            stmt.bindString(11, pm10);
        }
 
        String pm25 = entity.getPm25();
        if (pm25 != null) {
            stmt.bindString(12, pm25);
        }
 
        String quality = entity.getQuality();
        if (quality != null) {
            stmt.bindString(13, quality);
        }
 
        String so2 = entity.getSo2();
        if (so2 != null) {
            stmt.bindString(14, so2);
        }
 
        String timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindString(15, timestamp);
        }
 
        String upDateTime = entity.getUpDateTime();
        if (upDateTime != null) {
            stmt.bindString(16, upDateTime);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Aqi readEntity(Cursor cursor, int offset) {
        Aqi entity = new Aqi( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // areaId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // advice
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // aqi
            cursor.getInt(offset + 3), // citycount
            cursor.getInt(offset + 4), // cityrank
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // co
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // color
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // level
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // no2
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // o3
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // pm10
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // pm25
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // quality
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // so2
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // timestamp
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // upDateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Aqi entity, int offset) {
        entity.setAreaId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAdvice(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAqi(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCitycount(cursor.getInt(offset + 3));
        entity.setCityrank(cursor.getInt(offset + 4));
        entity.setCo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setColor(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLevel(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNo2(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setO3(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPm10(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPm25(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setQuality(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSo2(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setTimestamp(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setUpDateTime(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Aqi entity, long rowId) {
        return entity.getAreaId();
    }
    
    @Override
    public String getKey(Aqi entity) {
        if(entity != null) {
            return entity.getAreaId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Aqi entity) {
        return entity.getAreaId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
