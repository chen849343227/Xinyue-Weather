package com.chen.xinyueweather.dao.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.chen.xinyueweather.dao.bean.RealWeather;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REAL_WEATHER".
*/
public class RealWeatherDao extends AbstractDao<RealWeather, String> {

    public static final String TABLENAME = "REAL_WEATHER";

    /**
     * Properties of entity RealWeather.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AreaId = new Property(0, String.class, "areaId", true, "AREA_ID");
        public final static Property Img = new Property(1, String.class, "img", false, "IMG");
        public final static Property SD = new Property(2, String.class, "sD", false, "S_D");
        public final static Property SendibleTemp = new Property(3, String.class, "sendibleTemp", false, "SENDIBLE_TEMP");
        public final static Property Temp = new Property(4, String.class, "temp", false, "TEMP");
        public final static Property Time = new Property(5, String.class, "time", false, "TIME");
        public final static Property WD = new Property(6, String.class, "wD", false, "W_D");
        public final static Property WS = new Property(7, String.class, "wS", false, "W_S");
        public final static Property Weather = new Property(8, String.class, "weather", false, "WEATHER");
        public final static Property Ziwaixian = new Property(9, String.class, "ziwaixian", false, "ZIWAIXIAN");
    }


    public RealWeatherDao(DaoConfig config) {
        super(config);
    }
    
    public RealWeatherDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REAL_WEATHER\" (" + //
                "\"AREA_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: areaId
                "\"IMG\" TEXT," + // 1: img
                "\"S_D\" TEXT," + // 2: sD
                "\"SENDIBLE_TEMP\" TEXT," + // 3: sendibleTemp
                "\"TEMP\" TEXT," + // 4: temp
                "\"TIME\" TEXT," + // 5: time
                "\"W_D\" TEXT," + // 6: wD
                "\"W_S\" TEXT," + // 7: wS
                "\"WEATHER\" TEXT," + // 8: weather
                "\"ZIWAIXIAN\" TEXT);"); // 9: ziwaixian
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REAL_WEATHER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RealWeather entity) {
        stmt.clearBindings();
 
        String areaId = entity.getAreaId();
        if (areaId != null) {
            stmt.bindString(1, areaId);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(2, img);
        }
 
        String sD = entity.getSD();
        if (sD != null) {
            stmt.bindString(3, sD);
        }
 
        String sendibleTemp = entity.getSendibleTemp();
        if (sendibleTemp != null) {
            stmt.bindString(4, sendibleTemp);
        }
 
        String temp = entity.getTemp();
        if (temp != null) {
            stmt.bindString(5, temp);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
 
        String wD = entity.getWD();
        if (wD != null) {
            stmt.bindString(7, wD);
        }
 
        String wS = entity.getWS();
        if (wS != null) {
            stmt.bindString(8, wS);
        }
 
        String weather = entity.getWeather();
        if (weather != null) {
            stmt.bindString(9, weather);
        }
 
        String ziwaixian = entity.getZiwaixian();
        if (ziwaixian != null) {
            stmt.bindString(10, ziwaixian);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RealWeather entity) {
        stmt.clearBindings();
 
        String areaId = entity.getAreaId();
        if (areaId != null) {
            stmt.bindString(1, areaId);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(2, img);
        }
 
        String sD = entity.getSD();
        if (sD != null) {
            stmt.bindString(3, sD);
        }
 
        String sendibleTemp = entity.getSendibleTemp();
        if (sendibleTemp != null) {
            stmt.bindString(4, sendibleTemp);
        }
 
        String temp = entity.getTemp();
        if (temp != null) {
            stmt.bindString(5, temp);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
 
        String wD = entity.getWD();
        if (wD != null) {
            stmt.bindString(7, wD);
        }
 
        String wS = entity.getWS();
        if (wS != null) {
            stmt.bindString(8, wS);
        }
 
        String weather = entity.getWeather();
        if (weather != null) {
            stmt.bindString(9, weather);
        }
 
        String ziwaixian = entity.getZiwaixian();
        if (ziwaixian != null) {
            stmt.bindString(10, ziwaixian);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public RealWeather readEntity(Cursor cursor, int offset) {
        RealWeather entity = new RealWeather( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // areaId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // img
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sD
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sendibleTemp
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // temp
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // wD
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // wS
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // weather
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // ziwaixian
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RealWeather entity, int offset) {
        entity.setAreaId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setImg(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSD(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSendibleTemp(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTemp(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWD(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWS(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWeather(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setZiwaixian(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final String updateKeyAfterInsert(RealWeather entity, long rowId) {
        return entity.getAreaId();
    }
    
    @Override
    public String getKey(RealWeather entity) {
        if(entity != null) {
            return entity.getAreaId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RealWeather entity) {
        return entity.getAreaId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
